# -*- mode: ruby -*-
# vi: set ft=ruby :


require 'Win32API'
require 'win32ole'
require 'rbconfig'
include RbConfig



#
#
#
def CreateEnvironmentFile(name)

  file_name = name
  File.delete file_name if File.file? file_name

  if ENV[name]
    Dir.chdir( ENV['VAGRANT_CWD'] )
    out_file = File.new(name, "w")
    out_file.puts(ENV[name])
    out_file.close
  else
    puts name+' does not exist.'
  end
end



#
#
#
def MapWindowsDrives(config)

  #
  # Map all the windows drives to /HostRoot.
  #
  #GetLogicalDriveStrings Win32API.new("kernel32", "GetLogicalDriveStrings", ['L', 'P'], 'L')
  file_system             = WIN32OLE.new("Scripting.FileSystemObject")
  drives                  = file_system.Drives

  drives.each do |drive|
    if drive.IsReady

      driveLetter = drive.DriveLetter.upcase
      sourcePath = "#{driveLetter}:/"
      targetPath = "/HostRoot/#{driveLetter}/"
      config.vm.synced_folder sourcePath, targetPath

      driveLetter = drive.DriveLetter.downcase
      sourcePath = "#{driveLetter}:/"
      targetPath = "/HostRoot/#{driveLetter}/"
      config.vm.synced_folder sourcePath, targetPath

    else
      #puts "drive #{drive.DriveLetter} is not ready."
    end
  end

end



Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  #
  # http://www.vagrantbox.es/ for lsit of boxes
  # This one from http://goo.gl/8kWkm
  #
  config.vm.provision :shell, :path => "SetupBuildMachine.sh"

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "Trusty32"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/20140716/trusty-server-cloudimg-i386-vagrant-disk1.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/BlockWorksBuild"  

  #
  # Map the host filesystem.
  #
  platformName = RbConfig::CONFIG['host_os']
  #puts platformName
  case platformName
    when /mswin|windows|mingw32/i
      MapWindowsDrives(config)
    when /linux|arch/i
      config.vm.synced_folder "/", "/HostRoot"
    when /darwin/i
      config.vm.synced_folder "/", "/HostRoot"
    else
      puts "Unknown host platform!"
  end

  #
  # Create the files for the http_proxy info to be reflected inside the VM.
  #
  CreateEnvironmentFile 'http_proxy'
  CreateEnvironmentFile 'https_proxy'

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ['modifyvm', :id, '--usb', 'on']
    vb.customize ['usbfilter', 'add', '0', '--target', :id, '--name', 'edimax7718un', '--vendorid', '0x7392']
    #vb.customize ['usbfilter', 'add', '0', '--target', :id, '--name', 'TI LaunchPad', '--vendorid', '0x7392']
  end

  end
